% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/engine.R
\name{crs_engine_null}
\alias{crs_engine_null}
\alias{crs_engine_identity}
\alias{crs_engine_get_wk_trans}
\alias{crs_engine_transform}
\alias{crs_engine_proj_pipeline}
\alias{crs_engine_proj_pipeline_apply}
\alias{crs_engine_set_longlat}
\alias{crs_engine_transform.default}
\alias{crs_engine_transform.crs2crs_engine_null}
\alias{crs_engine_get_wk_trans.crs2crs_engine_identity}
\alias{crs_engine_set_longlat.default}
\title{Generic Coordinate Transform Engines}
\usage{
crs_engine_null()

crs_engine_identity(quiet = FALSE)

crs_engine_get_wk_trans(engine, handleable, crs_to, crs_from, ...)

crs_engine_transform(
  engine,
  handleable,
  crs_to,
  crs_from = wk::wk_crs(handleable),
  ...
)

crs_engine_proj_pipeline(
  engine,
  handleable,
  crs_to,
  crs_from = wk::wk_crs(handleable),
  ...
)

crs_engine_proj_pipeline_apply(engine, handleable, pipeline, ...)

crs_engine_set_longlat(engine, handleable, datum = NULL)

\method{crs_engine_transform}{default}(
  engine,
  handleable,
  crs_to,
  crs_from = wk::wk_crs(handleable),
  ...
)

\method{crs_engine_transform}{crs2crs_engine_null}(
  engine,
  handleable,
  crs_to,
  crs_from = wk::wk_crs(handleable),
  ...
)

\method{crs_engine_get_wk_trans}{crs2crs_engine_identity}(
  engine,
  handleable,
  crs_to,
  crs_from = wk::wk_crs(handleable),
  ...
)

\method{crs_engine_set_longlat}{default}(engine, handleable, datum = NULL)
}
\arguments{
\item{quiet}{Use \code{TRUE} to silence warnings about the dummy identity transform}

\item{engine}{A transform engine such as \code{\link[=crs_engine_null]{crs_engine_null()}}}

\item{handleable}{A geometry vector (e.g., \code{\link[wk:wkb]{wkb()}}, \code{\link[wk:wkt]{wkt()}}, \code{\link[wk:xy]{xy()}},
\code{\link[wk:rct]{rct()}}, or \code{\link[sf:sfc]{sf::st_sfc()}}) for which \code{\link[wk:wk_handle]{wk_handle()}} is defined.}

\item{crs_from, crs_to}{Source and destination coordinate reference systems}

\item{...}{engine-specific transformation options}

\item{pipeline}{A character vector representing a PROJ coordinate operation}

\item{datum}{A crs or datum (e.g., WGS84) to use for a long/lat definition}
}
\value{
\itemize{
\item \code{crs_engine_null()} returns an engine that errors on any attempt to perform
a coordinate transform.
\item \code{crs_get_wk_trans()} returns a \link[wk:wk_transform]{wk_trans} that can be used to
transform \code{handleable}.
\item \code{crs_engine_transform()} returns a modified version of \code{handleable} with the
transform applied.
\item \code{crs_engine_proj_pipeline()} returns a string representing the pipeline
transformation that can be passed to \code{crs_engine_proj_pipeline_apply()}
\item \code{crs_engine_proj_pipeline_apply()} Returns a transformed version of
\code{handleable} with a \code{NULL} CRS.
}
}
\description{
Generic Coordinate Transform Engines
}
\examples{
crs_engine_null()
crs_transform(
  wk::xy(1, 1), "some_crs",
  engine = crs_engine_identity()
)

}
